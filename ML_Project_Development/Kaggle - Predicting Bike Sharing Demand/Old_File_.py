{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "x_BkOtqBIKQz"
   },
   "source": [
    "# Data Science Challenge"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "U_VthdACIKQ6"
   },
   "outputs": [],
   "source": [
    "# If additional packages are needed that are not installed by default, uncomment the last two lines of this \n",
    "# cell and replace <package list> with a list of additional packages.\n",
    "# This will ensure the notebook has all the dependencies and works everywhere\n",
    "\n",
    "#import sys\n",
    "#!{sys.executable} -m pip install <package list>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "VzGFUCCVIKRL"
   },
   "outputs": [],
   "source": [
    "#Libraries\n",
    "import pandas as pd\n",
    "pd.set_option(\"display.max_columns\", 101)\n",
    "from datetime import timedelta,datetime"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "TZ23KNY8IKRT"
   },
   "source": [
    "## Data Description"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "jWSkqquEIKRW"
   },
   "source": [
    "Column | Description\n",
    ":---|:---\n",
    "`id` | Record index\n",
    "`timestamp` | Datetime (YYYY:MM:DD HH AM/PM)\n",
    "`season` | Season (spring, summer, fall, winter)\n",
    "`holiday` | Whether day is a holiday or not (Yes or No)\n",
    "`workingday` | Whether day is a working day or not (Yes or No)\n",
    "`weather`| Weather condition (Clear or partly cloudy, Mist, Light snow or rain, heavy rain/ice pellets/ snow + fog \n",
    "`temp`| Average temperature recorded for the hour ( in degree Celsius)\n",
    "`temp_feel`| Average feeling temperature recorded for the hour ( in degree Celsius)\n",
    "`hum`| Average humidity recorded for the hour (in %)\n",
    "`windspeed`| Average wind speed recorded for the hour (in miles/hour)\n",
    "`demand`| Hourly count of bikes rented"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "BWQqx7cSIKRX"
   },
   "source": [
    "## Data Wrangling & Visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "SsjL7tf7IKRc"
   },
   "outputs": [],
   "source": [
    "# The dataset is already loaded below\n",
    "data = pd.read_csv(\"train.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "kzuHtZEkIKRh",
    "outputId": "9d14832c-2eda-48eb-df41-548113a94a73"
   },
   "outputs": [],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "0mhMZRlBIKRu",
    "outputId": "0a669059-5528-4ec0-d64b-8231f6aadf45"
   },
   "outputs": [],
   "source": [
    "#Explore columns\n",
    "data.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "-SrTmyfJIKR1",
    "outputId": "12b270ca-8c3f-402b-d6c1-286c17e63fdd"
   },
   "outputs": [],
   "source": [
    "#Description\n",
    "data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "Vel-7S7gIKR9"
   },
   "outputs": [],
   "source": [
    "def pre_processing(df,train=True):\n",
    "    \n",
    "    if train == True:\n",
    "        \n",
    "        # Pre processing train data\n",
    "        #  Adding time and month to the dataframe using datatime column\n",
    "        time=[]\n",
    "        month=[]\n",
    "        for i in df['timestamp']:\n",
    "                dt_object2 = datetime.strptime(i, \"%Y-%m-%d %H:%M:%S\")\n",
    "                time.append(dt_object2.hour)\n",
    "                month.append(dt_object2.month)\n",
    "        df['time'] = pd.DataFrame(time)\n",
    "        df['time'] = df['time'].astype(float)\n",
    "        df['month'] = pd.DataFrame(month)\n",
    "        df['month'] = df['month'].astype(float)\n",
    "        \n",
    "        # Dropping datetime column\n",
    "        df.drop('timestamp',axis=1,inplace=True) \n",
    "        # Dropping holiday column as it is highly correlated to 'workingday' column\n",
    "        df.drop('holiday',axis=1,inplace=True) \n",
    "        # Dropping atemp column as it is highly correlated to 'temp' column\n",
    "        df = df.drop('temp_feel',axis=1) # No use \n",
    "\n",
    "        df['workingday'][df['workingday']=='No']=0\n",
    "        df['workingday'][df['workingday']!='No']=0\n",
    "        # One hot encoding on categorical columns.\n",
    "        df = pd.get_dummies(df,columns=['season','weather'],drop_first=True)  \n",
    "        \n",
    "        # Median imputation if any\n",
    "        for i in df.columns:\n",
    "            df[i].fillna(value = df[i].median())\n",
    "        return df\n",
    "    \n",
    "    \n",
    "    else:\n",
    "        # Pre processing Test data\n",
    "        #  Adding time and month to the dataframe using datatime column\n",
    "        time=[]\n",
    "        month=[]\n",
    "        for i in df['timestamp']:\n",
    "                dt_object2 = datetime.strptime(i, \"%Y-%m-%d %H:%M:%S\")\n",
    "                time.append(dt_object2.hour)\n",
    "                month.append(dt_object2.month)\n",
    "        df['time'] = pd.DataFrame(time)\n",
    "        df['time'] = df['time'].astype(float)\n",
    "        df['month'] = pd.DataFrame(month)\n",
    "        df['month'] = df['month'].astype(float)\n",
    "        \n",
    "        # Dropping datetime column\n",
    "        df.drop('timestamp',axis=1,inplace=True) \n",
    "        # Dropping holiday column as it is highly correlated to 'workingday' column\n",
    "        df.drop('holiday',axis=1,inplace=True) \n",
    "        # Dropping atemp column as it is highly correlated to 'temp' column\n",
    "        df = df.drop('temp_feel',axis=1) \n",
    "        \n",
    "        df['workingday'][df['workingday']=='No']=0\n",
    "        df['workingday'][df['workingday']!='No']=0\n",
    "        # One hot encoding on categorical columns.\n",
    "        df = pd.get_dummies(df[df.columns],drop_first=True)  \n",
    "        \n",
    "         # Median imputation if there are any null values\n",
    "        print(df.columns)\n",
    "        for i in df.columns:\n",
    "            df[i].fillna(value = df[i].median())\n",
    "            df[i]= df[i].astype(int)\n",
    "\n",
    "        return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "fp1nvdh-IKSE"
   },
   "outputs": [],
   "source": [
    "data2=pre_processing(data,train=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "px5KNTQ7IKSK"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>season</th>\n",
       "      <th>workingday</th>\n",
       "      <th>weather</th>\n",
       "      <th>temp</th>\n",
       "      <th>temp_feel</th>\n",
       "      <th>humidity</th>\n",
       "      <th>windspeed</th>\n",
       "      <th>demand</th>\n",
       "      <th>time</th>\n",
       "      <th>month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>spring</td>\n",
       "      <td>No</td>\n",
       "      <td>Clear or partly cloudy</td>\n",
       "      <td>9.84</td>\n",
       "      <td>14.395</td>\n",
       "      <td>81.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.772589</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>spring</td>\n",
       "      <td>No</td>\n",
       "      <td>Clear or partly cloudy</td>\n",
       "      <td>9.02</td>\n",
       "      <td>13.635</td>\n",
       "      <td>80.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.688879</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>spring</td>\n",
       "      <td>No</td>\n",
       "      <td>Clear or partly cloudy</td>\n",
       "      <td>9.02</td>\n",
       "      <td>13.635</td>\n",
       "      <td>80.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.465736</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>spring</td>\n",
       "      <td>No</td>\n",
       "      <td>Clear or partly cloudy</td>\n",
       "      <td>9.84</td>\n",
       "      <td>14.395</td>\n",
       "      <td>75.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.564949</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>spring</td>\n",
       "      <td>No</td>\n",
       "      <td>Clear or partly cloudy</td>\n",
       "      <td>9.84</td>\n",
       "      <td>14.395</td>\n",
       "      <td>75.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id  season workingday                 weather  temp  temp_feel  humidity  \\\n",
       "0   1  spring         No  Clear or partly cloudy  9.84     14.395      81.0   \n",
       "1   2  spring         No  Clear or partly cloudy  9.02     13.635      80.0   \n",
       "2   3  spring         No  Clear or partly cloudy  9.02     13.635      80.0   \n",
       "3   4  spring         No  Clear or partly cloudy  9.84     14.395      75.0   \n",
       "4   5  spring         No  Clear or partly cloudy  9.84     14.395      75.0   \n",
       "\n",
       "   windspeed    demand  time  month  \n",
       "0        0.0  2.772589   0.0    1.0  \n",
       "1        0.0  3.688879   1.0    1.0  \n",
       "2        0.0  3.465736   2.0    1.0  \n",
       "3        0.0  2.564949   3.0    1.0  \n",
       "4        0.0  0.000000   4.0    1.0  "
      ]
     },
     "execution_count": 333,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "W9B6xKGpIKSQ"
   },
   "outputs": [],
   "source": [
    "# ##Here are some of the hypothesis which could influence the demand of bikes:\n",
    "\n",
    "# Hourly trend: There must be high demand during office timings. Early morning and late evening can have different trend (cyclist) and low demand during 10:00 pm to 4:00 am.\n",
    "\n",
    "# Daily Trend: Registered users demand more bike on weekdays as compared to weekend or holiday.\n",
    "\n",
    "# Rain: The demand of bikes will be lower on a rainy day as compared to a sunny day. Similarly, higher humidity will cause to lower the demand and vice versa.\n",
    "\n",
    "# Temperature: In India, temperature has negative correlation with bike demand. But, after looking at Washington’s temperature graph, we presume it may have positive correlation.\n",
    "\n",
    "# Pollution: If the pollution level in a city starts soaring, people may start using Bike (it may be influenced by government / company policies or increased awareness).\n",
    "\n",
    "# Time: Total demand should have higher contribution of registered user as compared to casual because registered user base would increase over time.\n",
    "\n",
    "# Traffic: It can be positively correlated with Bike demand. Higher traffic may force people to use bike as compared to other road transport medium like car, taxi etc.\n",
    "\n",
    "#Training data set has 12 variables (see below) and Test has 9 (excluding registered, casual and count).\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "ymsdDaIPIKSX"
   },
   "source": [
    "## Visualization, Modeling, Machine Learning\n",
    "\n",
    "Build a model that can predict hourly demand and identify how different features influence the decision. Please explain the findings effectively to technical and non-technical audiences using comments and visualizations, if appropriate.\n",
    "- **Build an optimized model that effectively solves the business problem.**\n",
    "- **The model will be evaluated on the basis of mean absolute error.**\n",
    "- **Read the test.csv file and prepare features for testing.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 294,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "Hsxh3SMgIKSY",
    "outputId": "d98d0f00-f33f-407b-df59-a9915bb03fa1"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>season</th>\n",
       "      <th>holiday</th>\n",
       "      <th>workingday</th>\n",
       "      <th>weather</th>\n",
       "      <th>temp</th>\n",
       "      <th>temp_feel</th>\n",
       "      <th>humidity</th>\n",
       "      <th>windspeed</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>8709</td>\n",
       "      <td>2018-08-05 05:00:00</td>\n",
       "      <td>fall</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Clear or partly cloudy</td>\n",
       "      <td>29.52</td>\n",
       "      <td>34.850</td>\n",
       "      <td>74.0</td>\n",
       "      <td>16.9979</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>8710</td>\n",
       "      <td>2018-08-05 06:00:00</td>\n",
       "      <td>fall</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Clear or partly cloudy</td>\n",
       "      <td>29.52</td>\n",
       "      <td>34.850</td>\n",
       "      <td>79.0</td>\n",
       "      <td>16.9979</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8712</td>\n",
       "      <td>2018-08-05 08:00:00</td>\n",
       "      <td>fall</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Clear or partly cloudy</td>\n",
       "      <td>31.16</td>\n",
       "      <td>36.365</td>\n",
       "      <td>66.0</td>\n",
       "      <td>22.0028</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8713</td>\n",
       "      <td>2018-08-05 09:00:00</td>\n",
       "      <td>fall</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Clear or partly cloudy</td>\n",
       "      <td>32.80</td>\n",
       "      <td>38.635</td>\n",
       "      <td>59.0</td>\n",
       "      <td>23.9994</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8714</td>\n",
       "      <td>2018-08-05 10:00:00</td>\n",
       "      <td>fall</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Clear or partly cloudy</td>\n",
       "      <td>32.80</td>\n",
       "      <td>38.635</td>\n",
       "      <td>59.0</td>\n",
       "      <td>27.9993</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     id            timestamp season holiday workingday  \\\n",
       "0  8709  2018-08-05 05:00:00   fall      No         No   \n",
       "1  8710  2018-08-05 06:00:00   fall      No         No   \n",
       "2  8712  2018-08-05 08:00:00   fall      No         No   \n",
       "3  8713  2018-08-05 09:00:00   fall      No         No   \n",
       "4  8714  2018-08-05 10:00:00   fall      No         No   \n",
       "\n",
       "                  weather   temp  temp_feel  humidity  windspeed  \n",
       "0  Clear or partly cloudy  29.52     34.850      74.0    16.9979  \n",
       "1  Clear or partly cloudy  29.52     34.850      79.0    16.9979  \n",
       "2  Clear or partly cloudy  31.16     36.365      66.0    22.0028  \n",
       "3  Clear or partly cloudy  32.80     38.635      59.0    23.9994  \n",
       "4  Clear or partly cloudy  32.80     38.635      59.0    27.9993  "
      ]
     },
     "execution_count": 294,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Loading Test data\n",
    "test_data=pd.read_csv('test.csv')\n",
    "test_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 295,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "73vBzp7lIKSf"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['id', 'temp', 'humidity', 'windspeed', 'time', 'month', 'season_winter',\n",
      "       'weather_Light snow or rain', 'weather_Mist'],\n",
      "      dtype='object')\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_5698/1843169133.py:57: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df['workingday'][df['workingday']=='No']=0\n",
      "/tmp/ipykernel_5698/1843169133.py:58: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df['workingday'][df['workingday']!='No']=0\n",
      "/opt/conda/lib/python3.9/site-packages/pandas/core/algorithms.py:798: FutureWarning: In a future version, the Index constructor will not infer numeric dtypes when passed object-dtype sequences (matching Series behavior)\n",
      "  uniques = Index(uniques)\n"
     ]
    }
   ],
   "source": [
    "test_data2=pre_processing(test_data,train=False)\n",
    "#y_test=test_data2['demand']\n",
    "x_test=test_data2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 296,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "1XiIoLYLIKSj"
   },
   "outputs": [],
   "source": [
    "y_train=data2['demand']\n",
    "x_train=data2.drop(['demand'],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 297,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "7tBCHjd3IKSp"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>workingday</th>\n",
       "      <th>temp</th>\n",
       "      <th>humidity</th>\n",
       "      <th>windspeed</th>\n",
       "      <th>time</th>\n",
       "      <th>month</th>\n",
       "      <th>season_spring</th>\n",
       "      <th>season_summer</th>\n",
       "      <th>season_winter</th>\n",
       "      <th>weather_Light snow or rain</th>\n",
       "      <th>weather_Mist</th>\n",
       "      <th>weather_heavy rain/ice pellets/snow + fog</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>9.84</td>\n",
       "      <td>81.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>9.02</td>\n",
       "      <td>80.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>9.02</td>\n",
       "      <td>80.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>9.84</td>\n",
       "      <td>75.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>9.84</td>\n",
       "      <td>75.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id workingday  temp  humidity  windspeed  time  month  season_spring  \\\n",
       "0   1          0  9.84      81.0        0.0   0.0    1.0              1   \n",
       "1   2          0  9.02      80.0        0.0   1.0    1.0              1   \n",
       "2   3          0  9.02      80.0        0.0   2.0    1.0              1   \n",
       "3   4          0  9.84      75.0        0.0   3.0    1.0              1   \n",
       "4   5          0  9.84      75.0        0.0   4.0    1.0              1   \n",
       "\n",
       "   season_summer  season_winter  weather_Light snow or rain  weather_Mist  \\\n",
       "0              0              0                           0             0   \n",
       "1              0              0                           0             0   \n",
       "2              0              0                           0             0   \n",
       "3              0              0                           0             0   \n",
       "4              0              0                           0             0   \n",
       "\n",
       "   weather_heavy rain/ice pellets/snow + fog  \n",
       "0                                          0  \n",
       "1                                          0  \n",
       "2                                          0  \n",
       "3                                          0  \n",
       "4                                          0  "
      ]
     },
     "execution_count": 297,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 298,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "1Vk1EEy9IKSv"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>workingday</th>\n",
       "      <th>temp</th>\n",
       "      <th>humidity</th>\n",
       "      <th>windspeed</th>\n",
       "      <th>time</th>\n",
       "      <th>month</th>\n",
       "      <th>season_spring</th>\n",
       "      <th>season_summer</th>\n",
       "      <th>season_winter</th>\n",
       "      <th>weather_Light snow or rain</th>\n",
       "      <th>weather_Mist</th>\n",
       "      <th>weather_heavy rain/ice pellets/snow + fog</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>9.84</td>\n",
       "      <td>81.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>9.02</td>\n",
       "      <td>80.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>9.02</td>\n",
       "      <td>80.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>9.84</td>\n",
       "      <td>75.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>9.84</td>\n",
       "      <td>75.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id  workingday  temp  humidity  windspeed  time  month  season_spring  \\\n",
       "0   1           0  9.84      81.0        0.0   0.0    1.0              1   \n",
       "1   2           0  9.02      80.0        0.0   1.0    1.0              1   \n",
       "2   3           0  9.02      80.0        0.0   2.0    1.0              1   \n",
       "3   4           0  9.84      75.0        0.0   3.0    1.0              1   \n",
       "4   5           0  9.84      75.0        0.0   4.0    1.0              1   \n",
       "\n",
       "   season_summer  season_winter  weather_Light snow or rain  weather_Mist  \\\n",
       "0              0              0                           0             0   \n",
       "1              0              0                           0             0   \n",
       "2              0              0                           0             0   \n",
       "3              0              0                           0             0   \n",
       "4              0              0                           0             0   \n",
       "\n",
       "   weather_heavy rain/ice pellets/snow + fog  \n",
       "0                                          0  \n",
       "1                                          0  \n",
       "2                                          0  \n",
       "3                                          0  \n",
       "4                                          0  "
      ]
     },
     "execution_count": 298,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train=x_train.fillna(x_train.mean())\n",
    "x_test=x_test.fillna(x_test.mean())\n",
    "x_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 299,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "nkQU41WSIKSz"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>temp</th>\n",
       "      <th>humidity</th>\n",
       "      <th>windspeed</th>\n",
       "      <th>time</th>\n",
       "      <th>month</th>\n",
       "      <th>season_winter</th>\n",
       "      <th>weather_Light snow or rain</th>\n",
       "      <th>weather_Mist</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>8709</td>\n",
       "      <td>29</td>\n",
       "      <td>74</td>\n",
       "      <td>16</td>\n",
       "      <td>5</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>8710</td>\n",
       "      <td>29</td>\n",
       "      <td>79</td>\n",
       "      <td>16</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8712</td>\n",
       "      <td>31</td>\n",
       "      <td>66</td>\n",
       "      <td>22</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8713</td>\n",
       "      <td>32</td>\n",
       "      <td>59</td>\n",
       "      <td>23</td>\n",
       "      <td>9</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8714</td>\n",
       "      <td>32</td>\n",
       "      <td>59</td>\n",
       "      <td>27</td>\n",
       "      <td>10</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1787</th>\n",
       "      <td>10882</td>\n",
       "      <td>15</td>\n",
       "      <td>50</td>\n",
       "      <td>26</td>\n",
       "      <td>19</td>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1788</th>\n",
       "      <td>10883</td>\n",
       "      <td>14</td>\n",
       "      <td>57</td>\n",
       "      <td>15</td>\n",
       "      <td>20</td>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1789</th>\n",
       "      <td>10884</td>\n",
       "      <td>13</td>\n",
       "      <td>61</td>\n",
       "      <td>15</td>\n",
       "      <td>21</td>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1790</th>\n",
       "      <td>10885</td>\n",
       "      <td>13</td>\n",
       "      <td>61</td>\n",
       "      <td>6</td>\n",
       "      <td>22</td>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1791</th>\n",
       "      <td>10886</td>\n",
       "      <td>13</td>\n",
       "      <td>66</td>\n",
       "      <td>8</td>\n",
       "      <td>23</td>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1792 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         id  temp  humidity  windspeed  time  month  season_winter  \\\n",
       "0      8709    29        74         16     5      8              0   \n",
       "1      8710    29        79         16     6      8              0   \n",
       "2      8712    31        66         22     8      8              0   \n",
       "3      8713    32        59         23     9      8              0   \n",
       "4      8714    32        59         27    10      8              0   \n",
       "...     ...   ...       ...        ...   ...    ...            ...   \n",
       "1787  10882    15        50         26    19     12              1   \n",
       "1788  10883    14        57         15    20     12              1   \n",
       "1789  10884    13        61         15    21     12              1   \n",
       "1790  10885    13        61          6    22     12              1   \n",
       "1791  10886    13        66          8    23     12              1   \n",
       "\n",
       "      weather_Light snow or rain  weather_Mist  \n",
       "0                              0             0  \n",
       "1                              0             0  \n",
       "2                              0             0  \n",
       "3                              0             0  \n",
       "4                              0             0  \n",
       "...                          ...           ...  \n",
       "1787                           0             0  \n",
       "1788                           0             0  \n",
       "1789                           0             0  \n",
       "1790                           0             0  \n",
       "1791                           0             0  \n",
       "\n",
       "[1792 rows x 9 columns]"
      ]
     },
     "execution_count": 299,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 302,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train=x_train[x_test.columns]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#combine both train and test data sets to udnerstand them more "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 335,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>season</th>\n",
       "      <th>holiday</th>\n",
       "      <th>workingday</th>\n",
       "      <th>weather</th>\n",
       "      <th>temp</th>\n",
       "      <th>temp_feel</th>\n",
       "      <th>humidity</th>\n",
       "      <th>windspeed</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>8709</td>\n",
       "      <td>2018-08-05 05:00:00</td>\n",
       "      <td>fall</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Clear or partly cloudy</td>\n",
       "      <td>29.52</td>\n",
       "      <td>34.850</td>\n",
       "      <td>74.0</td>\n",
       "      <td>16.9979</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>8710</td>\n",
       "      <td>2018-08-05 06:00:00</td>\n",
       "      <td>fall</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Clear or partly cloudy</td>\n",
       "      <td>29.52</td>\n",
       "      <td>34.850</td>\n",
       "      <td>79.0</td>\n",
       "      <td>16.9979</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8712</td>\n",
       "      <td>2018-08-05 08:00:00</td>\n",
       "      <td>fall</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Clear or partly cloudy</td>\n",
       "      <td>31.16</td>\n",
       "      <td>36.365</td>\n",
       "      <td>66.0</td>\n",
       "      <td>22.0028</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8713</td>\n",
       "      <td>2018-08-05 09:00:00</td>\n",
       "      <td>fall</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Clear or partly cloudy</td>\n",
       "      <td>32.80</td>\n",
       "      <td>38.635</td>\n",
       "      <td>59.0</td>\n",
       "      <td>23.9994</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8714</td>\n",
       "      <td>2018-08-05 10:00:00</td>\n",
       "      <td>fall</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Clear or partly cloudy</td>\n",
       "      <td>32.80</td>\n",
       "      <td>38.635</td>\n",
       "      <td>59.0</td>\n",
       "      <td>27.9993</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     id            timestamp season holiday workingday  \\\n",
       "0  8709  2018-08-05 05:00:00   fall      No         No   \n",
       "1  8710  2018-08-05 06:00:00   fall      No         No   \n",
       "2  8712  2018-08-05 08:00:00   fall      No         No   \n",
       "3  8713  2018-08-05 09:00:00   fall      No         No   \n",
       "4  8714  2018-08-05 10:00:00   fall      No         No   \n",
       "\n",
       "                  weather   temp  temp_feel  humidity  windspeed  \n",
       "0  Clear or partly cloudy  29.52     34.850      74.0    16.9979  \n",
       "1  Clear or partly cloudy  29.52     34.850      79.0    16.9979  \n",
       "2  Clear or partly cloudy  31.16     36.365      66.0    22.0028  \n",
       "3  Clear or partly cloudy  32.80     38.635      59.0    23.9994  \n",
       "4  Clear or partly cloudy  32.80     38.635      59.0    27.9993  "
      ]
     },
     "execution_count": 335,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# The dataset is already loaded below\n",
    "data = pd.read_csv(\"train.csv\")\n",
    "#Loading Test data\n",
    "test_data=pd.read_csv('test.csv')\n",
    "test_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 337,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>season</th>\n",
       "      <th>holiday</th>\n",
       "      <th>workingday</th>\n",
       "      <th>weather</th>\n",
       "      <th>temp</th>\n",
       "      <th>temp_feel</th>\n",
       "      <th>humidity</th>\n",
       "      <th>windspeed</th>\n",
       "      <th>demand</th>\n",
       "      <th>registered</th>\n",
       "      <th>casual</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2017-01-01 00:00:00</td>\n",
       "      <td>spring</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Clear or partly cloudy</td>\n",
       "      <td>9.84</td>\n",
       "      <td>14.395</td>\n",
       "      <td>81.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.772589</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>2017-01-01 01:00:00</td>\n",
       "      <td>spring</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Clear or partly cloudy</td>\n",
       "      <td>9.02</td>\n",
       "      <td>13.635</td>\n",
       "      <td>80.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.688879</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>2017-01-01 02:00:00</td>\n",
       "      <td>spring</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Clear or partly cloudy</td>\n",
       "      <td>9.02</td>\n",
       "      <td>13.635</td>\n",
       "      <td>80.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.465736</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>2017-01-01 03:00:00</td>\n",
       "      <td>spring</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Clear or partly cloudy</td>\n",
       "      <td>9.84</td>\n",
       "      <td>14.395</td>\n",
       "      <td>75.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.564949</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>2017-01-01 04:00:00</td>\n",
       "      <td>spring</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Clear or partly cloudy</td>\n",
       "      <td>9.84</td>\n",
       "      <td>14.395</td>\n",
       "      <td>75.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id            timestamp  season holiday workingday                 weather  \\\n",
       "0   1  2017-01-01 00:00:00  spring      No         No  Clear or partly cloudy   \n",
       "1   2  2017-01-01 01:00:00  spring      No         No  Clear or partly cloudy   \n",
       "2   3  2017-01-01 02:00:00  spring      No         No  Clear or partly cloudy   \n",
       "3   4  2017-01-01 03:00:00  spring      No         No  Clear or partly cloudy   \n",
       "4   5  2017-01-01 04:00:00  spring      No         No  Clear or partly cloudy   \n",
       "\n",
       "   temp  temp_feel  humidity  windspeed    demand  registered  casual  count  \n",
       "0  9.84     14.395      81.0        0.0  2.772589         NaN     NaN    NaN  \n",
       "1  9.02     13.635      80.0        0.0  3.688879         NaN     NaN    NaN  \n",
       "2  9.02     13.635      80.0        0.0  3.465736         NaN     NaN    NaN  \n",
       "3  9.84     14.395      75.0        0.0  2.564949         NaN     NaN    NaN  \n",
       "4  9.84     14.395      75.0        0.0  0.000000         NaN     NaN    NaN  "
      ]
     },
     "execution_count": 337,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# combine train and test data into one df\n",
    "test_data['registered'] = 0\n",
    "test_data['casual'] = 0\n",
    "test_data['count'] = 0\n",
    "\n",
    "all_df = pd.concat([data, test_data])\n",
    "all_df.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 338,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>season</th>\n",
       "      <th>holiday</th>\n",
       "      <th>workingday</th>\n",
       "      <th>weather</th>\n",
       "      <th>temp</th>\n",
       "      <th>temp_feel</th>\n",
       "      <th>humidity</th>\n",
       "      <th>windspeed</th>\n",
       "      <th>demand</th>\n",
       "      <th>registered</th>\n",
       "      <th>casual</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1787</th>\n",
       "      <td>10882</td>\n",
       "      <td>2018-12-19 19:00:00</td>\n",
       "      <td>winter</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Clear or partly cloudy</td>\n",
       "      <td>15.58</td>\n",
       "      <td>19.695</td>\n",
       "      <td>50.0</td>\n",
       "      <td>26.0027</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1788</th>\n",
       "      <td>10883</td>\n",
       "      <td>2018-12-19 20:00:00</td>\n",
       "      <td>winter</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Clear or partly cloudy</td>\n",
       "      <td>14.76</td>\n",
       "      <td>17.425</td>\n",
       "      <td>57.0</td>\n",
       "      <td>15.0013</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1789</th>\n",
       "      <td>10884</td>\n",
       "      <td>2018-12-19 21:00:00</td>\n",
       "      <td>winter</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Clear or partly cloudy</td>\n",
       "      <td>13.94</td>\n",
       "      <td>15.910</td>\n",
       "      <td>61.0</td>\n",
       "      <td>15.0013</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1790</th>\n",
       "      <td>10885</td>\n",
       "      <td>2018-12-19 22:00:00</td>\n",
       "      <td>winter</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Clear or partly cloudy</td>\n",
       "      <td>13.94</td>\n",
       "      <td>17.425</td>\n",
       "      <td>61.0</td>\n",
       "      <td>6.0032</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1791</th>\n",
       "      <td>10886</td>\n",
       "      <td>2018-12-19 23:00:00</td>\n",
       "      <td>winter</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Clear or partly cloudy</td>\n",
       "      <td>13.12</td>\n",
       "      <td>16.665</td>\n",
       "      <td>66.0</td>\n",
       "      <td>8.9981</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         id            timestamp  season holiday workingday  \\\n",
       "1787  10882  2018-12-19 19:00:00  winter      No        Yes   \n",
       "1788  10883  2018-12-19 20:00:00  winter      No        Yes   \n",
       "1789  10884  2018-12-19 21:00:00  winter      No        Yes   \n",
       "1790  10885  2018-12-19 22:00:00  winter      No        Yes   \n",
       "1791  10886  2018-12-19 23:00:00  winter      No        Yes   \n",
       "\n",
       "                     weather   temp  temp_feel  humidity  windspeed  demand  \\\n",
       "1787  Clear or partly cloudy  15.58     19.695      50.0    26.0027     NaN   \n",
       "1788  Clear or partly cloudy  14.76     17.425      57.0    15.0013     NaN   \n",
       "1789  Clear or partly cloudy  13.94     15.910      61.0    15.0013     NaN   \n",
       "1790  Clear or partly cloudy  13.94     17.425      61.0     6.0032     NaN   \n",
       "1791  Clear or partly cloudy  13.12     16.665      66.0     8.9981     NaN   \n",
       "\n",
       "      registered  casual  count  \n",
       "1787         0.0     0.0    0.0  \n",
       "1788         0.0     0.0    0.0  \n",
       "1789         0.0     0.0    0.0  \n",
       "1790         0.0     0.0    0.0  \n",
       "1791         0.0     0.0    0.0  "
      ]
     },
     "execution_count": 338,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_df.tail(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 339,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['id', 'timestamp', 'season', 'holiday', 'workingday', 'weather', 'temp',\n",
       "       'temp_feel', 'humidity', 'windspeed', 'demand', 'registered', 'casual',\n",
       "       'count'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 339,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# lowercase column names\n",
    "all_df.columns = map(str.lower, all_df.columns)\n",
    "all_df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 341,
   "metadata": {},
   "outputs": [],
   "source": [
    "# parse datetime colum & add new time related columns\n",
    "dt = pd.DatetimeIndex(all_df['timestamp'])\n",
    "all_df.set_index(dt, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 342,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>season</th>\n",
       "      <th>holiday</th>\n",
       "      <th>workingday</th>\n",
       "      <th>weather</th>\n",
       "      <th>temp</th>\n",
       "      <th>temp_feel</th>\n",
       "      <th>humidity</th>\n",
       "      <th>windspeed</th>\n",
       "      <th>demand</th>\n",
       "      <th>registered</th>\n",
       "      <th>casual</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>timestamp</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2017-01-01 00:00:00</th>\n",
       "      <td>1</td>\n",
       "      <td>2017-01-01 00:00:00</td>\n",
       "      <td>spring</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Clear or partly cloudy</td>\n",
       "      <td>9.84</td>\n",
       "      <td>14.395</td>\n",
       "      <td>81.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.772589</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-01-01 01:00:00</th>\n",
       "      <td>2</td>\n",
       "      <td>2017-01-01 01:00:00</td>\n",
       "      <td>spring</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Clear or partly cloudy</td>\n",
       "      <td>9.02</td>\n",
       "      <td>13.635</td>\n",
       "      <td>80.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.688879</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-01-01 02:00:00</th>\n",
       "      <td>3</td>\n",
       "      <td>2017-01-01 02:00:00</td>\n",
       "      <td>spring</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Clear or partly cloudy</td>\n",
       "      <td>9.02</td>\n",
       "      <td>13.635</td>\n",
       "      <td>80.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.465736</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-01-01 03:00:00</th>\n",
       "      <td>4</td>\n",
       "      <td>2017-01-01 03:00:00</td>\n",
       "      <td>spring</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Clear or partly cloudy</td>\n",
       "      <td>9.84</td>\n",
       "      <td>14.395</td>\n",
       "      <td>75.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.564949</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-01-01 04:00:00</th>\n",
       "      <td>5</td>\n",
       "      <td>2017-01-01 04:00:00</td>\n",
       "      <td>spring</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Clear or partly cloudy</td>\n",
       "      <td>9.84</td>\n",
       "      <td>14.395</td>\n",
       "      <td>75.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     id            timestamp  season holiday workingday  \\\n",
       "timestamp                                                                 \n",
       "2017-01-01 00:00:00   1  2017-01-01 00:00:00  spring      No         No   \n",
       "2017-01-01 01:00:00   2  2017-01-01 01:00:00  spring      No         No   \n",
       "2017-01-01 02:00:00   3  2017-01-01 02:00:00  spring      No         No   \n",
       "2017-01-01 03:00:00   4  2017-01-01 03:00:00  spring      No         No   \n",
       "2017-01-01 04:00:00   5  2017-01-01 04:00:00  spring      No         No   \n",
       "\n",
       "                                    weather  temp  temp_feel  humidity  \\\n",
       "timestamp                                                                \n",
       "2017-01-01 00:00:00  Clear or partly cloudy  9.84     14.395      81.0   \n",
       "2017-01-01 01:00:00  Clear or partly cloudy  9.02     13.635      80.0   \n",
       "2017-01-01 02:00:00  Clear or partly cloudy  9.02     13.635      80.0   \n",
       "2017-01-01 03:00:00  Clear or partly cloudy  9.84     14.395      75.0   \n",
       "2017-01-01 04:00:00  Clear or partly cloudy  9.84     14.395      75.0   \n",
       "\n",
       "                     windspeed    demand  registered  casual  count  \n",
       "timestamp                                                            \n",
       "2017-01-01 00:00:00        0.0  2.772589         NaN     NaN    NaN  \n",
       "2017-01-01 01:00:00        0.0  3.688879         NaN     NaN    NaN  \n",
       "2017-01-01 02:00:00        0.0  3.465736         NaN     NaN    NaN  \n",
       "2017-01-01 03:00:00        0.0  2.564949         NaN     NaN    NaN  \n",
       "2017-01-01 04:00:00        0.0  0.000000         NaN     NaN    NaN  "
      ]
     },
     "execution_count": 342,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_df.head(5)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 345,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>season</th>\n",
       "      <th>holiday</th>\n",
       "      <th>workingday</th>\n",
       "      <th>weather</th>\n",
       "      <th>temp</th>\n",
       "      <th>temp_feel</th>\n",
       "      <th>humidity</th>\n",
       "      <th>windspeed</th>\n",
       "      <th>demand</th>\n",
       "      <th>registered</th>\n",
       "      <th>casual</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>timestamp</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2017-01-01 01:00:00</th>\n",
       "      <td>2</td>\n",
       "      <td>2017-01-01 01:00:00</td>\n",
       "      <td>spring</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Clear or partly cloudy</td>\n",
       "      <td>9.02</td>\n",
       "      <td>13.635</td>\n",
       "      <td>80.0</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>3.688879</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-01-01 02:00:00</th>\n",
       "      <td>3</td>\n",
       "      <td>2017-01-01 02:00:00</td>\n",
       "      <td>spring</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Clear or partly cloudy</td>\n",
       "      <td>9.02</td>\n",
       "      <td>13.635</td>\n",
       "      <td>80.0</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>3.465736</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-01-01 03:00:00</th>\n",
       "      <td>4</td>\n",
       "      <td>2017-01-01 03:00:00</td>\n",
       "      <td>spring</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Clear or partly cloudy</td>\n",
       "      <td>9.84</td>\n",
       "      <td>14.395</td>\n",
       "      <td>75.0</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>2.564949</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-01-01 04:00:00</th>\n",
       "      <td>5</td>\n",
       "      <td>2017-01-01 04:00:00</td>\n",
       "      <td>spring</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Clear or partly cloudy</td>\n",
       "      <td>9.84</td>\n",
       "      <td>14.395</td>\n",
       "      <td>75.0</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-01-01 05:00:00</th>\n",
       "      <td>6</td>\n",
       "      <td>2017-01-01 05:00:00</td>\n",
       "      <td>spring</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Mist</td>\n",
       "      <td>9.84</td>\n",
       "      <td>12.880</td>\n",
       "      <td>75.0</td>\n",
       "      <td>6.0032</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-12-19 23:00:00</th>\n",
       "      <td>5422</td>\n",
       "      <td>2017-12-19 23:00:00</td>\n",
       "      <td>winter</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Clear or partly cloudy</td>\n",
       "      <td>14.76</td>\n",
       "      <td>17.425</td>\n",
       "      <td>53.0</td>\n",
       "      <td>11.0014</td>\n",
       "      <td>4.094345</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-01 00:00:00</th>\n",
       "      <td>5423</td>\n",
       "      <td>2018-01-01 00:00:00</td>\n",
       "      <td>spring</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Clear or partly cloudy</td>\n",
       "      <td>14.76</td>\n",
       "      <td>18.940</td>\n",
       "      <td>66.0</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>3.871201</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-01 01:00:00</th>\n",
       "      <td>5424</td>\n",
       "      <td>2018-01-01 01:00:00</td>\n",
       "      <td>spring</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Clear or partly cloudy</td>\n",
       "      <td>14.76</td>\n",
       "      <td>17.425</td>\n",
       "      <td>66.0</td>\n",
       "      <td>8.9981</td>\n",
       "      <td>4.532599</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-01 02:00:00</th>\n",
       "      <td>5425</td>\n",
       "      <td>2018-01-01 02:00:00</td>\n",
       "      <td>spring</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Clear or partly cloudy</td>\n",
       "      <td>13.12</td>\n",
       "      <td>17.425</td>\n",
       "      <td>76.0</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>4.317488</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-01 03:00:00</th>\n",
       "      <td>5426</td>\n",
       "      <td>2018-01-01 03:00:00</td>\n",
       "      <td>spring</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Clear or partly cloudy</td>\n",
       "      <td>NaN</td>\n",
       "      <td>16.665</td>\n",
       "      <td>81.0</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>3.951244</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5425 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                       id            timestamp  season holiday workingday  \\\n",
       "timestamp                                                                   \n",
       "2017-01-01 01:00:00     2  2017-01-01 01:00:00  spring      No         No   \n",
       "2017-01-01 02:00:00     3  2017-01-01 02:00:00  spring      No         No   \n",
       "2017-01-01 03:00:00     4  2017-01-01 03:00:00  spring      No         No   \n",
       "2017-01-01 04:00:00     5  2017-01-01 04:00:00  spring      No         No   \n",
       "2017-01-01 05:00:00     6  2017-01-01 05:00:00  spring      No         No   \n",
       "...                   ...                  ...     ...     ...        ...   \n",
       "2017-12-19 23:00:00  5422  2017-12-19 23:00:00  winter      No        Yes   \n",
       "2018-01-01 00:00:00  5423  2018-01-01 00:00:00  spring      No         No   \n",
       "2018-01-01 01:00:00  5424  2018-01-01 01:00:00  spring      No         No   \n",
       "2018-01-01 02:00:00  5425  2018-01-01 02:00:00  spring      No         No   \n",
       "2018-01-01 03:00:00  5426  2018-01-01 03:00:00  spring      No         No   \n",
       "\n",
       "                                    weather   temp  temp_feel  humidity  \\\n",
       "timestamp                                                                 \n",
       "2017-01-01 01:00:00  Clear or partly cloudy   9.02     13.635      80.0   \n",
       "2017-01-01 02:00:00  Clear or partly cloudy   9.02     13.635      80.0   \n",
       "2017-01-01 03:00:00  Clear or partly cloudy   9.84     14.395      75.0   \n",
       "2017-01-01 04:00:00  Clear or partly cloudy   9.84     14.395      75.0   \n",
       "2017-01-01 05:00:00                    Mist   9.84     12.880      75.0   \n",
       "...                                     ...    ...        ...       ...   \n",
       "2017-12-19 23:00:00  Clear or partly cloudy  14.76     17.425      53.0   \n",
       "2018-01-01 00:00:00  Clear or partly cloudy  14.76     18.940      66.0   \n",
       "2018-01-01 01:00:00  Clear or partly cloudy  14.76     17.425      66.0   \n",
       "2018-01-01 02:00:00  Clear or partly cloudy  13.12     17.425      76.0   \n",
       "2018-01-01 03:00:00  Clear or partly cloudy    NaN     16.665      81.0   \n",
       "\n",
       "                     windspeed    demand  registered  casual  count  \n",
       "timestamp                                                            \n",
       "2017-01-01 01:00:00     0.0000  3.688879         NaN     NaN    NaN  \n",
       "2017-01-01 02:00:00     0.0000  3.465736         NaN     NaN    NaN  \n",
       "2017-01-01 03:00:00     0.0000  2.564949         NaN     NaN    NaN  \n",
       "2017-01-01 04:00:00     0.0000  0.000000         NaN     NaN    NaN  \n",
       "2017-01-01 05:00:00     6.0032  0.000000         NaN     NaN    NaN  \n",
       "...                        ...       ...         ...     ...    ...  \n",
       "2017-12-19 23:00:00    11.0014  4.094345         NaN     NaN    NaN  \n",
       "2018-01-01 00:00:00     0.0000  3.871201         NaN     NaN    NaN  \n",
       "2018-01-01 01:00:00     8.9981  4.532599         NaN     NaN    NaN  \n",
       "2018-01-01 02:00:00     0.0000  4.317488         NaN     NaN    NaN  \n",
       "2018-01-01 03:00:00     0.0000  3.951244         NaN     NaN    NaN  \n",
       "\n",
       "[5425 rows x 14 columns]"
      ]
     },
     "execution_count": 345,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Indexing by datetime let's us to select rows by specifying time ranges\n",
    "all_df['2017-01-01 01:00:00':'2018-01-01 03:00:00']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 346,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "29459"
      ]
     },
     "execution_count": 346,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# find missing values in dataset if any\n",
    "all_df.isnull().values.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Understand the distribution of numerical variables and generate a frequency table for numeric variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 349,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:ylabel='Frequency'>"
      ]
     },
     "execution_count": 349,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA4EAAAI/CAYAAADJHdx9AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAAsTAAALEwEAmpwYAAAux0lEQVR4nO3de5ReVWH//89OoEmQmwW0CtoEF0LIhYQkaLhZQAkKBKnlK+KFiwJfQEV/agu1FrTFRUu0FRUtXgAryE2UeKGlgggIGhKJ3AIrRKYxSCWgQKCABPfvj3nMdyAhTHCeTDL79Vpr1jxnz7nsGQ8s3p7znKfUWgMAAEAbhg32BAAAAFh7RCAAAEBDRCAAAEBDRCAAAEBDRCAAAEBDRCAAAEBDNhjsCXTLlltuWUePHj3Y0wAAABgU8+bNe6DWutWzx4dsBI4ePTpz584d7GkAAAAMilLKf69q3O2gAAAADRGBAAAADRGBAAAADRmy7wkEAAAG31NPPZUlS5bkiSeeGOypDFkjR47MNttskw033LBf64tAAACga5YsWZJNNtkko0ePTillsKcz5NRa8+CDD2bJkiUZM2ZMv7ZxOygAANA1TzzxRLbYYgsB2CWllGyxxRZrdKVVBAIAAF0lALtrTf++IhAAABjSdt1111WOH3HEEbn00kvX8mwGn/cEAgAAa83ok743oPvrOX3/513nhhtuGNBjru9EIAAAMKRtvPHGefTRR1Nrzfve975cffXVGTNmTGqtgz21QeF2UAAAoAnf+ta3ctddd+XWW2/Nl770pWavEIpAAACgCddee23e9ra3Zfjw4Xn5y1+evffee7CnNChEIAAA0AxPKhWBAABAI/bcc89ceOGFefrpp3Pfffflhz/84WBPaVB4MAwAANCEgw8+OFdffXUmTJiQV7/61Xnd61432FMaFCIQAABYa/rzkQ4D7dFHH03Seyvo5z73ubV+/HWN20EBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAIAh66GHHspZZ5012NNYp/icQAAAYO05dbMB3t/Dq/3xHyLw+OOPH9jjrsdE4Fr2qbce0PVjfOii73b9GAAAsD446aSTsmjRokyaNClveMMb8pKXvCQXX3xxnnzyyRx88MH5+Mc/np6enuy3337Zfffd85Of/CQ77bRTjjzyyJxyyim5//77c/7552eXXXbJqaeemkWLFuXee+/NL3/5y/z1X/91jj766MH+FdeY20EBAIAh6/TTT8+rXvWqzJ8/P294wxuycOHCzJkzJ/Pnz8+8efNy7bXXJknuvvvunHjiibnlllty55135oILLsj111+fWbNm5ZOf/OSK/d1yyy353ve+lxtvvDGf+MQn8qtf/WqwfrUXTAQCAABNuPLKK3PllVdm8uTJ2XnnnXPnnXdm4cKFSZIxY8ZkwoQJGTZsWMaNG5d99tknpZRMmDAhPT09K/Zx0EEHZdSoUdlyyy2z1157Zc6cOYP027xwbgcFAACaUGvNySefnGOPPfYZ4z09PRkxYsSK5WHDhq1YHjZsWJYvX77iZ6WUZ2z77OX1gSuBAADAkLXJJptk2bJlSZIZM2bkq1/9ah599NEkyb333pv7779/jfZ3+eWX54knnsiDDz6Ya665JtOmTRvwOXebK4EAAMCQtcUWW2S33XbL+PHj88Y3vjGHHXZYpk+fniTZeOON8/Wvfz3Dhw/v9/522WWX7L///lm8eHE+9rGP5eUvf3m3pt41IhAAAFh7nucjHbrhggsueMbyiSeeuNI6t91224rX55577orXo0ePfsbPXv3qV+fss88e+EmuRW4HBQAAaIgrgQAAAP1w6qmnDvYUBoQrgQAAAA0RgQAAAA0RgQAAAA0RgQAAAA0RgQAAAA3xdFAAAGCtmXDehAHd362H37ranz/00EO54IILcvzxxw/ocfvjIx/5SL7//e/nTW96U84444w12vaaa67JrFmz8t3vfnfA5yUCAQCAIeuhhx7KWWedNSgR+G//9m9ZunRpRowYsdaPvTpuBwUAAIask046KYsWLcqkSZPykY98JGeccUamTZuWiRMn5pRTTkmS9PT0ZIcddsh73vOejB8/Pm9/+9vzgx/8ILvttlu22267zJkzJ0nv5wS+853vzN57753tttsuX/rSl57zuDNnzsxjjz2W17zmNbnooouydOnSvOUtb8m0adMybdq0/PjHP06SPPbYYznqqKMybdq0TJ48OZdffnnX/yauBAIAAEPW6aefnttuuy3z58/PlVdemUsvvTRz5sxJrTUzZ87Mtddem1e+8pW5++67c8kll+Tss8/OtGnTcsEFF+T666/P7Nmz88lPfjLf/va3kyS33HJLfvKTn+Sxxx7L5MmTs//+++flL3/5SsedPXt2Nt5448yfPz9Jcthhh+WDH/xgdt999yxevDgzZszIggULctppp2XvvffOV7/61Tz00EPZZZdd8vrXv76rfxMRCAAANOHKK6/MlVdemcmTJydJHn300SxcuDCvfOUrM2bMmEyY0Pt+xXHjxmWfffZJKSUTJkxIT0/Pin0cdNBBGTVqVEaNGpW99torc+bMyZvf/ObnPfYPfvCD3HHHHSuWH3nkkSxbtixXXnllZs+enVmzZiVJnnjiiSxevHjgfulVEIEAAEATaq05+eSTc+yxxz5jvKen5xnv2xs2bNiK5WHDhmX58uUrflZKeca2z15+Lr///e9z4403ZtSoUSvN6Zvf/Ga23377Z4z/+te/7td+XwjvCQQAAIasTTbZJMuWLUuSzJgxI1/96lfz6KOPJknuvffe3H///Wu0v8svvzxPPPFEHnzwwVxzzTWZNm1av7bbd99987nPfW7F8h9uE50xY0Y++9nPptaaJLn55pvXaD4vhCuBAADAWvN8H+kw0LbYYovstttuGT9+fN74xjfmsMMOy/Tp05MkG2+8cb7+9a9n+PDh/d7fLrvskv333z+LFy/Oxz72sVW+H3BVzjzzzJxwwgmZOHFili9fnj333DNf/OIX87GPfSwf+MAHMnHixNRaM3r06K58LERf5Q/FOdRMnTq1zp07d7CnsZJPvfWArh/jQxd196QBAID+WrBgQcaOHTvY0xgQp556ajbeeON8+MMfHuyprGRVf+dSyrxa69Rnr+t2UAAAgIa4HRQAAKAfTj311JXGbr311rzzne98xtiIESPy05/+dC3Nas2JQAAAgBdowoQJKx7ysr5wOygAAEBDRCAAAEBDRCAAAEBDRCAAADCk9fT0ZPz48QO+37//+7/PD37wg5XGr7nmmhxwQO9Hw82ePTunn356kuTb3/527rjjjgGfx5ryYBgAAGCtWbDDwH5m4Ng7Fwzo/tbEJz7xieddZ+bMmZk5c2aS3gg84IADsuOOO3Z7aqvlSiAAADDkPf300zn66KMzbty47Lvvvnn88cfzF3/xF5k7d26S5IEHHsjo0aOTJOeee27e/OY358ADD8yYMWPyuc99Lp/+9KczefLkvPa1r81vfvObJMkRRxyRSy+9NEnyH//xH9lhhx2y++6757LLLltx3HPPPTfvfe97c8MNN2T27Nn5yEc+kkmTJmXRokXZeeedV6y3cOHCTJkyZa38LUQgAAAw5C1cuDAnnHBCbr/99my++eb55je/udr1b7vttlxwwQWZM2dOPvrRj2ajjTbKzTffnOnTp+drX/vaM9Z94okncvTRR+c73/lOrrvuuvzP//zPSvvbddddM3PmzJxxxhmZP39+XvWqV2WzzTZb8fES55xzTo444oiB+nVXSwQCAABD3pgxYzJp0qQkyZQpU9LT07Pa9ffaa69ssskm2WqrrbLZZpvlwAMPTNL7uYDP3vbOO+/MmDFjst1226WUkne84x39mtN73vOenHPOOXn66adz0UUX5bDDDlvTX+sFEYEAAMCQN2LEiBWvhw8fnuXLl2eDDTbI73//+yS9V/Oea/1hw4atWB42bFiWL1++0v5LKWs8p7e85S254oor8t3vfjdTpkzJFltsscb7eCFEIAAA0KTRo0dn3rx5SbLivX0vxA477JB77rknixYtSpJ84xvfWOV6m2yySZYtW7ZieeTIkZkxY0aOO+64HHnkkS/4+GtKBAIAAE368Ic/nC984QvZdddd88ADD7zg/YwcOTJnn3129t9//+y+++758z//81Wud+ihh+aMM87I5MmTVwTj29/+9pRSsu+++77g46+pUmtdawdbm6ZOnVr/8KSfdcmn3npA14/xoYu+2/VjAABAfyxYsCBjxw7sx0IMJbNmzcrDDz+cf/iHf/ij9rOqv3MpZV6tdeqz1+3q5wSWUj6Y5D1JapJbkxyZZKMkFyUZnaQnyf+ptf62s/7JSd6d5Okk76+1/mdnfEqSc5OMSvL9JCfWoVqvAABAEw4++OAsWrQoV1999Vo9btduBy2lbJ3k/Umm1lrHJxme5NAkJyW5qta6XZKrOssppezY+fm4JPslOauUMryzuy8kOSbJdp2v/bo1bwAAgLXhW9/6Vm655ZZsueWWa/W43X5P4AZJRpVSNkjvFcBfJTkoyXmdn5+X5M2d1wclubDW+mSt9Z4kdyfZpZTysiSb1lpv7Fz9+1qfbQAAAFgDXYvAWuu9SWYlWZzkviQP11qvTPLSWut9nXXuS/KSziZbJ/lln10s6Yxt3Xn97HEAAADWUDdvB31xeq/ujUny8iQvKqWs7lMTV/XBGnU146s65jGllLmllLlLly5d0ykDAAAMed28HfT1Se6ptS6ttT6V5LIkuyb5decWz3S+399Zf0mSV/TZfpv03j66pPP62eMrqbWeXWudWmudutVWWw3oLwMAADAUdDMCFyd5bSllo1JKSbJPkgVJZic5vLPO4Uku77yeneTQUsqIUsqY9D4AZk7nltFlpZTXdvbzrj7bAAAAvGBvetOb8tBDD/V7/Z6enowfP757E1qNjTfeeED207WPiKi1/rSUcmmSnyVZnuTmJGcn2TjJxaWUd6c3FA/prH97KeXiJHd01j+h1vp0Z3fH5f99RMQVnS8AAGA98/n/O7Afh3DCF/f+o7b//ve/P0AzWX909emgtdZTaq071FrH11rf2Xny54O11n1qrdt1vv+mz/qn1VpfVWvdvtZ6RZ/xuZ19vKrW+l6fEQgAAPTHP//zP+fMM89Mknzwgx/M3nv3RuNVV12Vd7zjHRk9enQeeOCB9PT0ZOzYsTn66KMzbty47Lvvvnn88ceTJPPmzctOO+2U6dOn5/Of//yKfd9+++3ZZZddMmnSpEycODELFy5MT09Pdthhhxx++OGZOHFi/uqv/ir/+7//u2I/r3vd6zJlypTMmDEj9913X5Jk0aJF2W+//TJlypTsscceufPOO5Mk99xzT6ZPn55p06blYx/72ID9Tbr9EREAAACDZs8998x1112XJJk7d24effTRPPXUU7n++uuzxx57PGPdhQsX5oQTTsjtt9+ezTffPN/85jeTJEceeWTOPPPM3Hjjjc9Y/4tf/GJOPPHEzJ8/P3Pnzs022/Q+yuSuu+7KMccck1tuuSWbbrppzjrrrDz11FN53/vel0svvTTz5s3LUUcdlY9+9KNJkmOOOSaf/exnM2/evMyaNSvHH398kuTEE0/Mcccdl5tuuil/9md/NmB/ExEIAAAMWVOmTMm8efOybNmyjBgxItOnT8/cuXNz3XXXrRSBY8aMyaRJk1Zs19PTk4cffjgPPfRQXve61yVJ3vnOd65Yf/r06fnkJz+Zf/qnf8p///d/Z9SoUUmSV7ziFdltt92SJO94xzty/fXX56677sptt92WN7zhDZk0aVL+8R//MUuWLMmjjz6aG264IYccckgmTZqUY489dsUVwh//+Md529vettJx/1hde08gAADAYNtwww0zevTonHPOOdl1110zceLE/PCHP8yiRYsyduzYZ6w7YsSIFa+HDx+exx9/PLXW9D6fcmWHHXZYXvOa1+R73/teZsyYkS9/+cvZdtttV1q/lJJaa8aNG7fS1cRHHnkkm2++eebPn7/KYzzXsf8YrgQCAABD2p577plZs2Zlzz33zB577JEvfvGLmTRpUr8Ca/PNN89mm22W66+/Pkly/vnnr/jZL37xi2y77bZ5//vfn5kzZ+aWW25JkixevHhF7H3jG9/I7rvvnu233z5Lly5dMf7UU0/l9ttvz6abbpoxY8bkkksuSZLUWvPzn/88SbLbbrvlwgsvXOm4fywRCAAADGl77LFH7rvvvkyfPj0vfelLM3LkyJVuBV2dc845JyeccEKmT5++4pbPJLnooosyfvz4TJo0KXfeeWfe9a53JUnGjh2b8847LxMnTsxvfvObHHfccfmTP/mTXHrppfmbv/mb7LTTTpk0aVJuuOGGJL2B95WvfCU77bRTxo0bl8sv7/1EvM985jP5/Oc/n2nTpuXhhx8esL9HGaoP2pw6dWqdO3fuYE9jJZ966wFdP8aHLvpu148BAAD9sWDBgpVuuxzKenp6csABB+S2225bq8dd1d+5lDKv1jr12eu6EggAANAQEQgAADBARo8evdavAq4pEQgAANAQEQgAANAQEQgAANAQEQgAANAQEQgAADTj1FNPzaxZswZ7Ghk9enQeeOCBQTn2BoNyVAAAoEkD/bnZPiN7zbkSCAAADGmnnXZatt9++7z+9a/PXXfdlSRZtGhR9ttvv0yZMiV77LFH7rzzziTJEUcckeOOOy577bVXtt122/zoRz/KUUcdlbFjx+aII45Ysc/jjjsuU6dOzbhx43LKKaesGB89enROOeWU7LzzzpkwYcKK/T744IPZd999M3ny5Bx77LGpta69P8CziEAAAGDImjdvXi688MLcfPPNueyyy3LTTTclSY455ph89rOfzbx58zJr1qwcf/zxK7b57W9/m6uvvjr/8i//kgMPPDAf/OAHc/vtt+fWW2/N/Pnzk/SG5dy5c3PLLbfkRz/6UW655ZYV22+55Zb52c9+luOOO27Fracf//jHs/vuu+fmm2/OzJkzs3jx4rX3R3gWt4MCAABD1nXXXZeDDz44G220UZJk5syZeeKJJ3LDDTfkkEMOWbHek08+ueL1gQcemFJKJkyYkJe+9KWZMGFCkmTcuHHp6enJpEmTcvHFF+fss8/O8uXLc9999+WOO+7IxIkTkyR/+Zd/mSSZMmVKLrvssiTJtddeu+L1/vvvnxe/+MXd/+WfgwgEAACGtFLKM5Z///vfZ/PNN19xVe/ZRowYkSQZNmzYitd/WF6+fHnuueeezJo1KzfddFNe/OIX54gjjsgTTzyx0vbDhw/P8uXLn3Meg8XtoAAAwJC155575lvf+lYef/zxLFu2LN/5zney0UYbZcyYMbnkkkuSJLXW/PznP+/3Ph955JG86EUvymabbZZf//rXueKKK/o1j/PPPz9JcsUVV+S3v/3tC/uFBoAIBAAAhqydd945b33rWzNp0qS85S1vyR577JEkOf/88/OVr3wlO+20U8aNG5fLL7+83/vcaaedMnny5IwbNy5HHXVUdtttt+fd5pRTTsm1116bnXfeOVdeeWVe+cpXvuDf6Y9VBvOpNN00derUOnfu3MGexkoG+pG4q+IxuQAArCsWLFiQsWPHDvY0hrxV/Z1LKfNqrVOfva4rgQAAAA0RgQAAAA0RgQAAAA0RgQAAQFcN1eeQrCvW9O8rAgEAgK4ZOXJkHnzwQSHYJbXWPPjggxk5cmS/t/Fh8QAAQNdss802WbJkSZYuXTrYUxmyRo4cmW222abf64tAAACgazbccMOMGTNmsKdBH24HBQAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaIgIBAAAaEhXI7CUsnkp5dJSyp2llAWllOmllD8tpfxXKWVh5/uL+6x/cinl7lLKXaWUGX3Gp5RSbu387MxSSunmvAEAAIaqbl8J/EyS/6i17pBkpyQLkpyU5Kpa63ZJruosp5SyY5JDk4xLsl+Ss0opwzv7+UKSY5Js1/nar8vzBgAAGJK6FoGllE2T7JnkK0lSa/1drfWhJAclOa+z2nlJ3tx5fVCSC2utT9Za70lyd5JdSikvS7JprfXGWmtN8rU+2wAAALAGunklcNskS5OcU0q5uZTy5VLKi5K8tNZ6X5J0vr+ks/7WSX7ZZ/slnbGtO6+fPQ4AAMAa6mYEbpBk5yRfqLVOTvJYOrd+PodVvc+vrmZ85R2UckwpZW4pZe7SpUvXdL4AAABDXjcjcEmSJbXWn3aWL01vFP66c4tnOt/v77P+K/psv02SX3XGt1nF+EpqrWfXWqfWWqdutdVWA/aLAAAADBVdi8Ba6/8k+WUpZfvO0D5J7kgyO8nhnbHDk1zeeT07yaGllBGllDHpfQDMnM4to8tKKa/tPBX0XX22AQAAYA1s0OX9vy/J+aWUP0nyiyRHpjc8Ly6lvDvJ4iSHJEmt9fZSysXpDcXlSU6otT7d2c9xSc5NMirJFZ0vAAAA1lBXI7DWOj/J1FX8aJ/nWP+0JKetYnxukvEDOjkAAIAGdftzAgEAAFiHiEAAAICGiEAAAICGiEAAAICGiEAAAICGiEAAAICGiEAAAICGiEAAAICGiEAAAICGiEAAAICGiEAAAICGiEAAAICGiEAAAICGiEAAAICGiEAAAICGiEAAAICGiEAAAICGiEAAAICGiEAAAICGiEAAAICGiEAAAICGiEAAAICGiEAAAICGiEAAAICGiEAAAICGiEAAAICGiEAAAICGiEAAAICGiEAAAICGiEAAAICGiEAAAICGiEAAAICGiEAAAICGiEAAAICGiEAAAICGiEAAAICGiEAAAICGiEAAAICGiEAAAICGiEAAAICGiEAAAICGiEAAAICGiEAAAICGiEAAAICGiEAAAICGiEAAAICGiEAAAICGiEAAAICGiEAAAICGiEAAAICGiEAAAICGiEAAAICGiEAAAICGiEAAAICGiEAAAICGiEAAAICG9CsCSynjuz0RAAAAuq+/VwK/WEqZU0o5vpSyeTcnBAAAQPf0KwJrrbsneXuSVySZW0q5oJTyhq7ODAAAgAHX7/cE1loXJvm7JH+T5HVJziyl3FlK+ctuTQ4AAICB1d/3BE4spfxLkgVJ9k5yYK11bOf1v3RxfgAAAAygDfq53ueSfCnJ39ZaH//DYK31V6WUv+vKzAAAABhw/Y3ANyV5vNb6dJKUUoYlGVlr/d9a6793bXYAAAAMqP6+J/AHSUb1Wd6oMwYAAMB6pL8ROLLW+ugfFjqvN+rOlAAAAOiW/kbgY6WUnf+wUEqZkuTx1awPAADAOqi/7wn8QJJLSim/6iy/LMlbuzIjAAAAuqZfEVhrvamUskOS7ZOUJHfWWp/q6swAAAAYcP29Epgk05KM7mwzuZSSWuvXujIrAAAAuqJfEVhK+fckr0oyP8nTneGaRAQCAACsR/p7JXBqkh1rrbWbkwEAAKC7+vt00NuS/Fk3JwIAAED39fdK4JZJ7iilzEny5B8Ga60zuzIrAAAAuqK/EXhqNycBAADA2tHfj4j4USnlz5NsV2v9QSlloyTDuzs1AAAABlq/3hNYSjk6yaVJ/q0ztHWSb3dpTgAAAHRJfx8Mc0KS3ZI8kiS11oVJXtKtSQEAANAd/Y3AJ2utv/vDQillg/R+TiAAAADrkf5G4I9KKX+bZFQp5Q1JLknyne5NCwAAgG7obwSelGRpkluTHJvk+0n+rluTAgAAoDv6+3TQ3yf5UucLAACA9VS/IrCUck9W8R7AWuu2Az4jAAAAuqa/HxY/tc/rkUkOSfKnAz8dAAAAuqlf7wmstT7Y5+veWuu/Jtm7u1MDAABgoPX3dtCd+ywOS++VwU26MiMAAAC6pr+3g36qz+vlSXqS/J8Bnw0AAABd1d+ng+7V7YkAAADQff29HfT/W93Pa62fHpjpAAAA0E1r8nTQaUlmd5YPTHJtkl92Y1IAAAB0R38jcMskO9dalyVJKeXUJJfUWt/TrYkBAAAw8Pr1ERFJXpnkd32Wf5dk9IDPBgAAgK7q75XAf08yp5TyrSQ1ycFJvta1WQEAANAV/X066GmllCuS7NEZOrLWenP3pgUAAEA39Pd20CTZKMkjtdbPJFlSShnTpTkBAADQJf2KwFLKKUn+JsnJnaENk3y9W5MCAACgO/p7JfDgJDOTPJYktdZfJdmkW5MCAACgO/obgb+rtdb0PhQmpZQXdW9KAAAAdEt/I/DiUsq/Jdm8lHJ0kh8k+VL3pgUAAEA3PO/TQUspJclFSXZI8kiS7ZP8fa31v7o8NwAAAAbY80ZgrbWWUr5da52SRPgBAACsx/p7O+hPSinTujoTAAAAuq5fHxafZK8k/7eU0pPeJ4SW9F4knNitiQEAADDwVhuBpZRX1loXJ3njWpoPAAAAXfR8VwK/nWTnWut/l1K+WWt9y1qYEwAAAF3yfO8JLH1eb9vNiQAAANB9zxeB9TleAwAAsB56vttBdyqlPJLeK4KjOq+T//dgmE27OjsAAAAG1GojsNY6fG1NBAAAgO7r7+cEAgAAMASIQAAAgIZ0PQJLKcNLKTeXUr7bWf7TUsp/lVIWdr6/uM+6J5dS7i6l3FVKmdFnfEop5dbOz84spZRVHQsAAIDVWxtXAk9MsqDP8klJrqq1bpfkqs5ySik7Jjk0ybgk+yU5q5Tyh/ckfiHJMUm263zttxbmDQAAMOR0NQJLKdsk2T/Jl/sMH5TkvM7r85K8uc/4hbXWJ2ut9yS5O8kupZSXJdm01npjrbUm+VqfbQAAAFgD3b4S+K9J/jrJ7/uMvbTWel+SdL6/pDO+dZJf9llvSWds687rZ48DAACwhroWgaWUA5LcX2ud199NVjFWVzO+qmMeU0qZW0qZu3Tp0n4eFgAAoB3dvBK4W5KZpZSeJBcm2buU8vUkv+7c4pnO9/s76y9J8oo+22+T5Fed8W1WMb6SWuvZtdaptdapW2211UD+LgAAAENC1yKw1npyrXWbWuvo9D7w5epa6zuSzE5yeGe1w5Nc3nk9O8mhpZQRpZQx6X0AzJzOLaPLSimv7TwV9F19tgEAAGANbDAIxzw9ycWllHcnWZzkkCSptd5eSrk4yR1Jlic5odb6dGeb45Kcm2RUkis6XwAAAKyhtRKBtdZrklzTef1gkn2eY73Tkpy2ivG5ScZ3b4YAAABtWBufEwgAAMA6QgpGsRWEp5RSnlh6WUBaWU20spJ3bG/7SU8l+llIWd7y/us83JpZS7Syl3lVJm9BmfUkq5tfOzM0sppVvzBgAAGMq6eSVweZIP1VrHJnltkhNKKTsmOSnJVbXW7ZJc1VlO52eHJhmXZL8kZ5VShnf29YUkxyTZrvO1XxfnDQAAMGR1LQJrrffVWn/Web0syYIkWyc5KMl5ndXOS/LmzuuDklxYa32y1npPkruT7FJKeVmSTWutN9Zaa5Kv9dkGAACANbBW3hNYShmdZHKSnyZ5aa31vqQ3FJO8pLPa1kl+2WezJZ2xrTuvnz0OAADAGup6BJZSNk7yzSQfqLU+srpVVzFWVzO+qmMdU0qZW0qZu3Tp0jWfLAAAwBDX1QgspWyY3gA8v9Z6WWf4151bPNP5fn9nfEmSV/TZfJskv+qMb7OK8ZXUWs+utU6ttU7daqutBu4XAQAAGCK6+XTQkuQrSRbUWj/d50ezkxzeeX14ksv7jB9aShlRShmT3gfAzOncMrqslPLazj7f1WcbAAAA1sAGXdz3bknemeTWUsr8ztjfJjk9ycWllHcnWZzkkCSptd5eSrk4yR3pfbLoCbXWpzvbHZfk3CSjklzR+QIAAGANdS0Ca63XZ9Xv50uSfZ5jm9OSnLaK8blJxg/c7AAAANq0Vp4OCgAAwLpkg8GeAKzO6JO+1/Vj9Jy+f9ePMZSsjf9NEv+7rCn/rKx7/LOyZvy91k3+3bLu8c/KmvH3WrVSax3sOXTF1KlT69y5cwd7Giv51FsP6PoxPjvmuK4fAwAA6LWuRmApZV6tdeqzx90OCgAA0BARCAAA0BARCAAA0BARCAAA0BARCAAA0BARCAAA0BARCAAA0BARCAAA0BARCAAA0BARCAAA0BARCAAA0BARCAAA0JD1JgJLKfuVUu4qpdxdSjlpsOcDAACwPlovIrCUMjzJ55O8McmOSd5WStlxcGcFAACw/lkvIjDJLknurrX+otb6uyQXJjlokOcEAACw3llfInDrJL/ss7ykMwYAAMAa2GCwJ9BPZRVjdaWVSjkmyTGdxUdLKXd1dVYvzJZJHujuIb7X3d3TqrVw7sKAc96yvnLusr5q8twt/zTYM3hOf76qwfUlApckeUWf5W2S/OrZK9Vaz05y9tqa1AtRSplba5062POANeXcZX3kvGV95dxlfeXcXT+sL7eD3pRku1LKmFLKnyQ5NMnsQZ4TAADAeme9uBJYa11eSnlvkv9MMjzJV2uttw/ytAAAANY760UEJkmt9ftJvj/Y8xgA6/TtqrAazl3WR85b1lfOXdZXzt31QKl1peerAAAAMEStL+8JBAAAYACIwLWklLJfKeWuUsrdpZSTBns+UEp5RSnlh6WUBaWU20spJ3bG/7SU8l+llIWd7y/us83JnXP4rlLKjD7jU0opt3Z+dmYpZVUf6wIDppQyvJRycynlu51l5y3rvFLK5qWUS0spd3b+3Tvducv6oJTywc5/K9xWSvlGKWWkc3f9JgLXglLK8CSfT/LGJDsmeVspZcfBnRVkeZIP1VrHJnltkhM65+VJSa6qtW6X5KrOcjo/OzTJuCT7JTmrc24nyRfS+xmd23W+9lubvwhNOjHJgj7LzlvWB59J8h+11h2S7JTec9i5yzqtlLJ1kvcnmVprHZ/ehzQeGufuek0Erh27JLm71vqLWuvvklyY5KBBnhONq7XeV2v9Wef1svT+x8jW6T03z+usdl6SN3deH5Tkwlrrk7XWe5LcnWSXUsrLkmxaa72x9r7J+Gt9toEBV0rZJsn+Sb7cZ9h5yzqtlLJpkj2TfCVJaq2/q7U+FOcu64cNkowqpWyQZKP0fl63c3c9JgLXjq2T/LLP8pLOGKwTSimjk0xO8tMkL6213pf0hmKSl3RWe67zeOvO62ePQ7f8a5K/TvL7PmPOW9Z12yZZmuSczq3MXy6lvCjOXdZxtdZ7k8xKsjjJfUkerrVeGefuek0Erh2rut/ZY1lZJ5RSNk7yzSQfqLU+srpVVzFWVzMOA66UckCS+2ut8/q7ySrGnLcMhg2S7JzkC7XWyUkeS+f2uefg3GWd0Hmv30FJxiR5eZIXlVLesbpNVjHm3F3HiMC1Y0mSV/RZ3ia9l9FhUJVSNkxvAJ5fa72sM/zrzi0b6Xy/vzP+XOfxks7rZ49DN+yWZGYppSe9t9bvXUr5epy3rPuWJFlSa/1pZ/nS9Eahc5d13euT3FNrXVprfSrJZUl2jXN3vSYC146bkmxXShlTSvmT9L5ZdvYgz4nGdZ7I9ZUkC2qtn+7zo9lJDu+8PjzJ5X3GDy2ljCiljEnvG7rndG4BWVZKeW1nn+/qsw0MqFrrybXWbWqto9P779Kra63viPOWdVyt9X+S/LKUsn1naJ8kd8S5y7pvcZLXllI26pxz+6T3OQLO3fXYBoM9gRbUWpeXUt6b5D/T+0Slr9Zabx/kacFuSd6Z5NZSyvzO2N8mOT3JxaWUd6f3X/yHJEmt9fZSysXp/Y+W5UlOqLU+3dnuuCTnJhmV5IrOF6xNzlvWB+9Lcn7n/xD+RZIj0/t/yDt3WWfVWn9aSrk0yc/Sey7enOTsJBvHubveKr0P5wEAAKAFbgcFAABoiAgEAABoiAgEAABoiAgEAABoiAgEAABoiAgEAABoiAgEAABoiAgEAABoyP8PL93FPlveCkwAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 1080x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data.plot(kind = 'hist', bins=30, figsize=(15, 10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "plt.figure(figsize=(20,15))\n",
    "plt.subplot(421)\n",
    "all_df['season'].astype(\"category\").plot.hist(bins=10, color='blue', label='Histogram of Season', edgecolor='black')\n",
    "plt.legend(loc='best')\n",
    "plt.subplot(422)\n",
    "all_df['weather'].plot.hist(bins=10, color='green', label='Histogram of Weather', edgecolor='black')\n",
    "plt.legend(loc='best')\n",
    "plt.subplot(423)\n",
    "all_df['humidity'].plot.hist(bins=10, color='orange', label='Histogram of Humidity', edgecolor='black')\n",
    "plt.legend(loc='best')\n",
    "plt.subplot(424)\n",
    "all_df['holiday'].plot.hist(bins=10, color='pink', label='Histogram of Holiday', edgecolor='black')\n",
    "plt.legend(loc='best')\n",
    "plt.subplot(425)\n",
    "all_df['workingday'].plot.hist(bins=10, color='red', label='Histogram of Working Day', edgecolor='black')\n",
    "plt.legend(loc='best')\n",
    "plt.subplot(426)\n",
    "all_df['temp'].plot.hist(bins=10, color='yellow', label='Histogram of Temperature', edgecolor='black')\n",
    "plt.legend(loc='best')\n",
    "plt.subplot(427)\n",
    "all_df['atemp'].plot.hist(bins=10, color='cyan', label='Histogram of Feels Like Temp', edgecolor='black')\n",
    "plt.legend(loc='best')\n",
    "plt.subplot(428)\n",
    "all_df['windspeed'].plot.hist(bins=10, color='purple', label='Histogram of Windpseed', edgecolor='black')\n",
    "plt.legend(loc='best')\n",
    "plt.tight_layout();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# logarithmic transformation of dependent cols\n",
    "# (adding 1 first so that 0 values don't become -inf)\n",
    "for col in ['casual', 'registered', 'count']:\n",
    "    all_df['%s_log' % col] = np.log(all_df[col] + 1)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_df['date'] = dt.date\n",
    "all_df['day'] = dt.day\n",
    "all_df['month'] = dt.month\n",
    "all_df['year'] = dt.year\n",
    "all_df['hour'] = dt.hour\n",
    "all_df['dow'] = dt.dayofweek\n",
    "all_df['woy'] = dt.weekofyear"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# How many columns have null values\n",
    "all_df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# interpolate weather, temp, atemp, humidity, windspeed\n",
    "all_df[\"weather\"] = all_df[\"weather\"].interpolate(method='time').apply(np.round)\n",
    "all_df[\"temp\"] = all_df[\"temp\"].interpolate(method='time')\n",
    "all_df[\"atemp\"] = all_df[\"atemp\"].interpolate(method='time')\n",
    "all_df[\"humidity\"] = all_df[\"humidity\"].interpolate(method='time').apply(np.round)\n",
    "all_df[\"windspeed\"] = all_df[\"windspeed\"].interpolate(method='time')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# add a count_season column using join\n",
    "by_season = all_df[all_df['data_set'] == 'train'].copy().groupby(['season'])[['count']].agg(sum)\n",
    "by_season.columns = ['count_season']\n",
    "all_df = all_df.join(by_season, on='season')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(by_season)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "by_season.plot(kind='barh')\n",
    "plt.grid(True)\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_day(day_start):\n",
    "    day_end = day_start + pd.offsets.DateOffset(hours=23)\n",
    "    return pd.date_range(day_start, day_end, freq=\"H\")\n",
    "\n",
    "# tax day\n",
    "all_df.loc[get_day(pd.datetime(2011, 4, 15)), \"workingday\"] = 1\n",
    "all_df.loc[get_day(pd.datetime(2012, 4, 16)), \"workingday\"] = 1\n",
    "\n",
    "# thanksgiving friday\n",
    "all_df.loc[get_day(pd.datetime(2011, 11, 25)), \"workingday\"] = 0\n",
    "all_df.loc[get_day(pd.datetime(2012, 11, 23)), \"workingday\"] = 0\n",
    "\n",
    "# tax day\n",
    "all_df.loc[get_day(pd.datetime(2011, 4, 15)), \"holiday\"] = 0\n",
    "all_df.loc[get_day(pd.datetime(2012, 4, 16)), \"holiday\"] = 0\n",
    "\n",
    "# thanksgiving friday\n",
    "all_df.loc[get_day(pd.datetime(2011, 11, 25)), \"holiday\"] = 1\n",
    "all_df.loc[get_day(pd.datetime(2012, 11, 23)), \"holiday\"] = 1\n",
    "\n",
    "#storms\n",
    "all_df.loc[get_day(pd.datetime(2012, 5, 21)), \"holiday\"] = 1\n",
    "\n",
    "#tornado\n",
    "all_df.loc[get_day(pd.datetime(2012, 6, 1)), \"holiday\"] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "by_hour = all_df[all_df['data_set'] == 'train'].copy().groupby(['hour', 'workingday'])['count'].agg('sum').unstack()\n",
    "by_hour.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# rentals by hour, split by working day (or not)\n",
    "by_hour.plot(kind='bar', figsize=(15,5), width=0.8);\n",
    "plt.grid(True)\n",
    "plt.tight_layout();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "MK_rdXETIKS4"
   },
   "source": [
    "\n",
    "\n",
    "**Identify the most important features of the model for management.**\n",
    "\n",
    "> #### Task:\n",
    "- **Visualize the top 20 features and their feature importance.**\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "HHFM3XPMIKS6"
   },
   "outputs": [],
   "source": [
    "sub_df = data[['count', 'registered', 'casual', 'temp', 'atemp', 'humidity', 'windspeed', 'workingday', 'holiday']]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "jabG4TJwIKS_"
   },
   "outputs": [],
   "source": [
    "corrMatt = sub_df.corr()\n",
    "mask = np.zeros_like(corrMatt)\n",
    "mask[np.triu_indices_from(mask)] = True\n",
    "fig, ax = plt.subplots(figsize=(15, 6))\n",
    "sns.heatmap(corrMatt, mask=mask, vmax=.8, square=False, annot=True, ax=ax, linewidths=1);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "UFogmgYZIKTE"
   },
   "source": [
    "> #### Task:\n",
    "- **Submit the predictions on the test dataset using the optimized model** <br/>\n",
    "    For each record in the test set (`test.csv`), predict the value of the `demand` variable. Submit a CSV file with a header row and one row per test entry.\n",
    "    \n",
    "The file (`submissions.csv`) should have exactly 2 columns:\n",
    "   - **id**\n",
    "   - **demand**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 300,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "7xgNg25MIKTG"
   },
   "outputs": [],
   "source": [
    "#as it's a time series model going with a linear model(simple model),boosting both AdaBoostRegressor & Xgboost(which works well with predictionof time series data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 304,
   "metadata": {},
   "outputs": [],
   "source": [
    "import statsmodels.api as smf\n",
    "\n",
    "model1=smf.OLS(y_train,x_train)\n",
    "result = model1.fit()\n",
    "result.summary()\n",
    "y_pred = result.predict(x_test)\n",
    "\n",
    "from sklearn.metrics import mean_squared_log_error\n",
    "#msle=mean_squared_log_error(y_pred,y_test)\n",
    "#rmsle=np.sqrt(msle)\n",
    "#print('RMLSE for the data:',rmsle)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 254,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1.000e+00, 0.000e+00, 9.840e+00, ..., 0.000e+00, 0.000e+00,\n",
       "        0.000e+00],\n",
       "       [2.000e+00, 0.000e+00, 9.020e+00, ..., 0.000e+00, 0.000e+00,\n",
       "        0.000e+00],\n",
       "       [3.000e+00, 0.000e+00, 9.020e+00, ..., 0.000e+00, 0.000e+00,\n",
       "        0.000e+00],\n",
       "       ...,\n",
       "       [8.706e+03, 0.000e+00, 3.034e+01, ..., 0.000e+00, 0.000e+00,\n",
       "        0.000e+00],\n",
       "       [8.707e+03, 0.000e+00, 2.952e+01, ..., 0.000e+00, 0.000e+00,\n",
       "        0.000e+00],\n",
       "       [8.708e+03, 0.000e+00, 2.952e+01, ..., 0.000e+00, 0.000e+00,\n",
       "        0.000e+00]])"
      ]
     },
     "execution_count": 254,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "np.asarray(x_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 308,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "OaxN7BjwIKTL"
   },
   "outputs": [],
   "source": [
    "########Developing ensemble methods -boosting ####################"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 320,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from sklearn.ensemble import RandomForestRegressor,AdaBoostRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 311,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Finding best parameters for decision tree\n",
    "dt = DecisionTreeRegressor(random_state=0)\n",
    "dt_params = {'max_depth':np.arange(1,50,2),'min_samples_leaf':np.arange(2,15)}\n",
    "\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "gs_dt = GridSearchCV(dt,dt_params,cv=3)\n",
    "gs_dt.fit(x_train,y_train)\n",
    "a = gs_dt.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 314,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Training with best parameters\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "dtr=DecisionTreeRegressor(max_depth=a['max_depth'],min_samples_leaf= a['min_samples_leaf'])\n",
    "model = dtr.fit(x_train,y_train)\n",
    "y_pred = model.predict(x_test)\n",
    "\n",
    "from sklearn.metrics import mean_squared_log_error\n",
    "#msle=mean_squared_log_error(y_pred,y_test)\n",
    "#rmsle=np.sqrt(msle)\n",
    "#print('RMLSE for the data:',rmsle) # For decision tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 318,
   "metadata": {},
   "outputs": [],
   "source": [
    "###Random Forests\n",
    "\n",
    "# Finding best parameters for RandomForestRegressor\n",
    "rf = RandomForestRegressor(random_state=0)\n",
    "rf_params = {'n_estimators':np.arange(25,150,25),'max_depth':np.arange(1,11,2),'min_samples_leaf':np.arange(2,15,3)}\n",
    "\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "gs_rf = GridSearchCV(rf,rf_params,cv=3)\n",
    "gs_rf.fit(x_train,y_train)\n",
    "b = gs_rf.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 319,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Fitting the model with best params\n",
    "RF = RandomForestRegressor(n_estimators=b['n_estimators'],max_depth=b['max_depth'],min_samples_leaf=b['min_samples_leaf'],random_state=0)\n",
    "model = RF.fit(x_train,y_train)\n",
    "y_pred = model.predict(x_test)\n",
    "\n",
    "from sklearn.metrics import mean_squared_log_error\n",
    "#msle=mean_squared_log_error(y_pred,y_test)\n",
    "#rmsle=np.sqrt(msle)\n",
    "#print('RMLSE for the data:',rmsle) # For random forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Adaboost \n",
    "# Finding best parameters for AdaBoostRegressor\n",
    "ar = AdaBoostRegressor(base_estimator=RF,random_state=0)\n",
    "ar_params = {'n_estimators':np.arange(25,200,25)}\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "gs_ar = GridSearchCV(ar,ar_params,cv=3)\n",
    "gs_ar.fit(x_train,y_train)\n",
    "c = gs_ar.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Fitting the model with best params\n",
    "ab_rf = AdaBoostRegressor(base_estimator=RF,n_estimators=c['n_estimators'],random_state=0)\n",
    "model = ab_rf.fit(x_train,y_train)\n",
    "y_pred = model.predict(x_test)\n",
    "\n",
    "from sklearn.metrics import mean_squared_log_error\n",
    "# msle=mean_squared_log_error(y_pred,y_test)\n",
    "# rmsle=np.sqrt(msle)\n",
    "# print('RMLSE for the data:',rmsle) # For Ada-Boost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "submission_df=y_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "nBRVPrYbIKTQ"
   },
   "outputs": [],
   "source": [
    "#Submission\n",
    "submission_df.to_csv('submissions.csv',index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "H_pB8zTcIKTW"
   },
   "source": [
    "---"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [],
   "name": "Questions.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
